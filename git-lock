#!/bin/bash

# git-lock script which will delegate all commands to lock-client-lib.sh

LOG_LEVEL_QUIET=0
LOG_LEVEL_ERROR=1
LOG_LEVEL_INFO=2
LOG_LEVEL_DEBUG=3
logLevel=$LOG_LEVEL_INFO

# Check if a log level was given
param="${1:-}"
if [ -n "$param" ]; then
	case "$param" in
		--quiet) logLevel=$LOG_LEVEL_QUIET; shift;;
		--error) logLevel=$LOG_LEVEL_ERROR; shift;;
		--info) logLevel=$LOG_LEVEL_INFO; shift;;
		--debug) logLevel=$LOG_LEVEL_DEBUG; shift;;
	esac
fi

# Get the log device, so that we can redirect logging messages directly to the tty device.
# In MinGW there is not /dev/tty available so we try a perl command if that is installed
# If not /dev/tty and no perl is available we'll redirect all messages to a log file
perlAvailable=$(perl -v)
if [ "$?" = 0 ]; then
	ttyDevice=$(perl -e 'use POSIX qw(ttyname); print POSIX::ttyname(2);')
elif [ -e "/dev/tty" ]; then
	ttyDevice="/dev/tty"
else
	ttyDevice="$(pwd)/git-lock.log"
fi

# Function to log messages to the proper output device
logMessage() {
	echo "$1" > "$ttyDevice"
}

# Function to ask the user for input
askForInput() {
	checkParameter 1 "askForInput() [QUESTION]" "$@"
	question="$1"
	
	read -p "$question" answer
	echo "$answer"
}

# Check if the working dir is set
if [ -z "${LOCK_CLIENT_BIN_DIR:-}" ]; then
	errorMsg="Environment variable LOCK_CLIENT_BIN_DIR not found"
	logMessage "$errorMsg"
	echo "$errorMsg"
	exit 1
fi

# Import the lock-client functions
. "${LOCK_CLIENT_BIN_DIR}"/lock-client-lib.sh

returnValue=$(lockClient "$@")
returnCode=$?
if [ -n "$returnValue" ]; then
	logInfo "$returnValue"
fi
exit $returnCode
